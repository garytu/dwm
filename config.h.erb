/* See LICENSE file for copyright and license details. */

#include<X11/XF86keysym.h>

/* appearance */
static const char font[]            = "-*-terminus-medium-r-*-*-16-*-*-*-*-*-*-*";
static const char normbordercolor[] = "#bbb";
static const char normbgcolor[]     = "#000";
static const char normfgcolor[]     = "#bbb";
static const char selbordercolor[]  = "#88c";
static const char selbgcolor[]      = "#000";
static const char selfgcolor[]      = "#88c";
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int gappx     = 4;        /* gap pixel between windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const Bool showbar           = True;     /* False means no bar */
static const Bool topbar            = True;     /* False means bottom bar */

/* tagging */
<% tags = {
  home: "1/home",
  web: "2/web",
  dev: "3/dev",
  notes: "4/notes",
  chat: "5/chat",
  test: "6/test",
  other: "7/other"
} %>
static const char *tags[] = {<%=
tags.values.map(&:inspect).join(',') %>};
   
static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
  { NULL,          "DIALOG",   NULL,             0,                                   True,        -1 },
  { "XFontSel",    NULL,       NULL,             0,                                   True,        -1 },
	{ "Xmessage",    NULL,       NULL,             0,                                   True,        -1 },
  { "Lotus Notes", NULL,       NULL,             1 << <%= tags.keys.index :notes %>,  False,      -1 },
  { "Lotus Notes", NULL,       " [started: ",    1 << <%= tags.keys.index :chat %>,   True,       -1 },
	{ "Pidgin",      "Pidgin",   NULL,             1 << <%= tags.keys.index :chat %>,   True,       -1 },
	{ "Pidgin",      "Pidgin",   "Buddy List",     1 << <%= tags.keys.index :chat %>,   True,       -1 },
  { "Wine",        NULL,       "System Tray",    1 << <%= tags.keys.index :other %>,  True,       -1 },
  { "Wine",        "SimpLite", "Simp",           1 << <%= tags.keys.index :other %>,  True,       -1 },
};

/* layout(s) */
static const float mfact      = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster      = 1;    /* number of clients in master area */
static const Bool resizehints = True; /* True means respect size hints in tiled resizals */

<% layouts = {
  tile:        "[]=", # "[]=",
  nil =>       "><>", # "><>",
  monocle:     "[M]", # "[M]",
  gaplessgrid: "[+]",
  bstack:      "TTT",
  bstackhoriz: "===",
 	spiral:      "[@]",
 	dwindle:     "[\\]",
} %>
static const Layout layouts[] = {<%= layouts.map {|func, icon| "{#{icon.inspect}, #{func || :NULL}}" }.join(',') %>};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *dmenucmd[]    = { "dwm-dmenu", NULL };
static const char *termcmd[]     = { "dwm-xterm", NULL };
static const char *broswercmd[]  = { "dwm-browser", NULL};
static const char *fmcmd[]       = { "dwm-filemanager", NULL};
static const char *editorcmd[]   = { "dwm-editor", NULL};
static const char *lockcmd[]     = { "dwm-lock", NULL};
static const char *volmutecmd[]  = { "dwm-volume", "mute", NULL };
static const char *volupcmd[]    = { "dwm-volume", "up",  NULL };
static const char *voldowncmd[]  = { "dwm-volume", "down", NULL };
static const char *sshotcmd[]    = { "dwm-screenshot", NULL };
static const char *wshotcmd[]    = { "dwm-windowshot", NULL };
static const char *sscreencmd[]  = { "dwm-switch-screen", NULL};

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
  { MODKEY|Mod1Mask,              XK_x,      spawn,          {.v = termcmd } },
  { MODKEY|Mod1Mask,              XK_b,      spawn,          {.v = broswercmd} },
	{ MODKEY|Mod1Mask,              XK_f,      spawn,          {.v = fmcmd} },
	{ MODKEY|Mod1Mask,              XK_e,      spawn,          {.v = editorcmd} },
	{ MODKEY|ControlMask,           XK_s,      spawn,          {.v = sshotcmd} },
	{ MODKEY|ControlMask,           XK_w,      spawn,          {.v = wshotcmd} },
  { MODKEY,                       XK_F2,     spawn,          {.v = lockcmd} },
  { 0,                            XF86XK_AudioMute, spawn,   {.v = volmutecmd } },
  { 0,                            XF86XK_AudioLowerVolume, spawn, {.v = voldowncmd } },
  { 0,                            XF86XK_AudioRaiseVolume, spawn, {.v = volupcmd   } },
  { MODKEY,                       XK_F7,     spawn,          {.v = sscreencmd} },
	{ Mod1Mask,                     XK_Tab,    focusstack,     {.i = +1 } },
  { MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,             XK_j,      movestack,      {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_k,      movestack,      {.i = -1 } },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[<%= layouts.keys.index :tile %>]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[<%= layouts.keys.index nil %>]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[<%= layouts.keys.index :monocle %>]} },
	{ MODKEY,                       XK_g,      setlayout,      {.v = &layouts[<%= layouts.keys.index :gaplessgrid %>]} },
	{ MODKEY,                       XK_bracketleft,setlayout,  {.v = &layouts[<%= layouts.keys.index :bstack %>]} },
	{ MODKEY,                       XK_bracketright,setlayout, {.v = &layouts[<%= layouts.keys.index :bstackhoriz %>]} },
	{ MODKEY,                       XK_minus,  setlayout,      {.v = &layouts[<%= layouts.keys.index :spiral %>]} },
	{ MODKEY,                       XK_equal,  setlayout,      {.v = &layouts[<%= layouts.keys.index :dwindle %>]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

